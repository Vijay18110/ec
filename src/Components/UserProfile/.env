import React, { useEffect, useState } from "react";
import "./profile.css";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { uiAction } from "../../Redux/Slices/uiSlice.jsx";
import { cartActions } from "../../Redux/Slices/cartSlice.jsx";
import { wishlistActions } from "../../Redux/Slices/wishlistSlice.jsx";
import { getWishlist } from "../../Utils/getWishlist.js";
import { MdOutlineEdit, MdOutlineMail } from "react-icons/md";
import { validateCustomerForm } from "../../Validation/Customerdetails.js";
import { Key } from "../../Utils/Key.js";
import { toast } from "react-toastify";
import { IoMdCall } from "react-icons/io";
import { validateFileType1 } from "../../Utils/CheckFileValidation.jsx";
import ApiEncryptDecrypt from "../../Utils/Encryption.js";
import axiosInstance from "../../Utils/axiosInstance.js";
import MyOrdersimg from "../../assets/Images/my-orders.png";
import LoyaltyProgramme from "../../assets/Images/loyalty-programme.jpg";
import ReferFriend from "../../assets/Images/refer-a-friend.jpg";
import MyAddresses from "../../assets/Images/my-addresses.jpg";
import MyWishlist from "../../assets/Images/my-wishlist.jpg";
import NeedHelp from "../../assets/Images/need-help.jpg";
import UserDefaultPic from "../../assets/Images/userDefaultImg.webp";
const MyOrders = React.lazy(() => import("./MyOrders.jsx"));
const AddAddress = React.lazy(() => import("./AddAddress.jsx"));
const Wishlist = React.lazy(() => import("../Wishlist/Wishlist.jsx"));
const MyAccount = React.lazy(() => import("./MyAccount.jsx"));
const MyWallet = React.lazy(() => import("./MyWallet.jsx"));
const NeedHelpList = React.lazy(() =>
  import("../NeedSupportList/NeedHelp.jsx")
);
const CoupanList = React.lazy(() => import("./CoupanList.jsx"));
import PreviewImage from "../../ExternalLib/PreviewImage/PreviewImage.jsx.jsx";
import { orderAction } from "../../Redux/Slices/orderSlice.jsx";
import ChangePassword from "./ChangePassword/ChangePassword.jsx";
import { chatAction } from "../../Redux/Slices/chatSlice.jsx";
import Tooltip from "../ToolTip/ToolTip.jsx";
import { walletActions } from "../../Redux/Slices/walletSlice.jsx";
import { getWalletAmmount } from "../../Utils/TotalWallet.js";
import UserSlider from "./Slider/UserSlider.jsx";
const UserProfile = () => {
  const tabs = useSelector((state) => state.uireducer.tabs);
  const [response, setResponce] = useState([]);
  const dispatch = useDispatch();
  const [pincode, setpincode] = useState(null);
  const loggedInUserData = JSON.parse(sessionStorage.getItem("loggedInUser"));
  const getProfileData = async () => {
    const userData = {
      CustomerId: loggedInUserData?.CustomerId,
      LoginToken: loggedInUserData?.LoginToken,
      DeviceType: "Web",
      AppVersion: "1.0",
    };
    const encryptedData = await ApiEncryptDecrypt.encryptString(
      Key,
      JSON.stringify({ ...userData })
    );
    const jsonData = { Body: encryptedData };
    let res;
    res = await axiosInstance.post("/CustomerDetail", jsonData);
    const decryptedRes = await ApiEncryptDecrypt.decryptString(
      Key,
      res.data.body
    );
    const obj = JSON.parse(decryptedRes);
    if (obj.Status === 0) {
      setResponce(obj?.Response);
    }
    if (obj.Status === 1) {
      toast.error(obj.Message);
    }
    if (obj.Status === 3) {
      dispatch(uiAction.openModal());
    }
  };
  const navigate = useNavigate();
  useEffect(() => {
    getProfileData();
  }, []);

  const getCartAndWishlist = () => {
    dispatch(cartActions.setResponceData([]));
    dispatch(wishlistActions.setWishlist([]));
  };
  const handleLogout = () => {
    sessionStorage.removeItem("loggedInUser");
    getCartAndWishlist();
    dispatch(uiAction.setUser());
    dispatch(cartActions.setCartData(null));
    navigate("/");
  };
  const handleSetTab = async (tabsName) => {
    if (tabsName === "SupportTicketList") {
      dispatch(chatAction.setIsOpenSupportTicketForm(false));
    }

    dispatch(uiAction.settabs(tabsName));
    dispatch(wishlistActions.setIsOrderDetail(false));
    dispatch(orderAction.setIsReturn(false));
  };
  const lists = useSelector((state) => state.wishlistreducer.wishlist);
  const getresponce = async () => {
    const loggedInUser = JSON.parse(sessionStorage.getItem("loggedInUser"));
    if (loggedInUser) {
      const responce = await getWishlist();
      dispatch(
        wishlistActions.setWishlist(responce?.obj?.Response?.lstWishData)
      );
    }
  };
  useEffect(() => {
    getresponce();
  }, []);
  const handleMyAccount = () => {
    if (loggedInUserData) {
      dispatch(
        uiAction.setCustomer({
          field: "solutation",
          value: response?.Solutation,
        })
      );
      dispatch(
        uiAction.setCustomer({ field: "mobile", value: response?.Mobile })
      );
      dispatch(
        uiAction.setCustomer({ field: "email", value: response?.CustomerEmail })
      );
      dispatch(
        uiAction.setCustomer({ field: "address", value: response?.Address })
      );
      dispatch(uiAction.setCustomer({ field: "city", value: response?.City }));
      dispatch(
        uiAction.setCustomer({ field: "country", value: response?.Country })
      );
      dispatch(
        uiAction.setCustomer({ field: "state", value: response?.State })
      );
      dispatch(
        uiAction.setCustomer({
          field: "fullName",
          value: response?.CustomerName,
        })
      );
      setpincode(response?.Pincode);
      dispatch(uiAction.settabs("myAccount"));
    }
  };

  const customer = useSelector((state) => state.uireducer.customer);
  const handlePincodeChange = async (e) => {
    setpincode(e.target.value);
    if (e.target.value.length == 6) {
      const res = await fetch(
        `https://api.tantrash.com/API/Pincode/TTPLPincode?pincode=${e.target.value}`
      );
      const data = await res.json();
      dispatch(
        uiAction.setMultipleFields({
          city: data?.pincodeList[0]?.districtName || "",
          state: data?.pincodeList[0]?.stateName || "",
          country: "India",
        })
      );
    } else {
      dispatch(uiAction.setMultipleFields({ city: "", state: "" }));
    }
  };
  const handleSaveAddress = async () => {
    const loggedInUser = JSON.parse(sessionStorage.getItem("loggedInUser"));
    if (validateCustomerForm(customer)) {
      const data = {
        MobileNo: customer.mobile,
        CustomerId: loggedInUser.CustomerId,
        CustomerName: customer.fullName,
        Solutation: customer.solutation || "Mr.",
        CustomerEmail: customer.email,
        CustomerAddress: customer.address,
        CustomerState: customer.state,
        CustomerCity: customer.city,
        CustomerCountry: customer.country,
        CustomerPincode: pincode,
      };
      const encryptedData = await ApiEncryptDecrypt.encryptString(
        Key,
        JSON.stringify({ ...data })
      );
      const jsonData = { Body: encryptedData };
      let res;
      res = await axiosInstance.post("/UpdateCustomerDetail", jsonData);
      const decryptedRes = await ApiEncryptDecrypt.decryptString(
        Key,
        res.data.body
      );
      const obj = JSON.parse(decryptedRes);
      if (obj.Status === 0) {
        getProfileData();
      }
      if (obj.Status === 1) {
        toast.error(obj.Message);
      }
      if (obj.Status === 3) {
        dispatch(uiAction.openModal());
      }
      setpincode("");
      dispatch(
        uiAction.setMultipleFields({
          address: "",
          email: "",
          city: "",
          fullName: "",
          solutation: "",
          country: "",
          mobile: "",
          state: "",
        })
      );
    }
  };
  const [imageSrc, setImageSrc] = useState(null);
  const [loading, setLoading] = useState(false);
  const [isUpload, setIsUpload] = useState(false);
  const [file, setFile] = useState(null);
  const handleChangeFile = (e) => {
    const file = e.target.files[0];
    if (!validateFileType1(file)) {
      return;
    }
    setIsUpload(true);
    if (!file) return;
    setFile(file);
    setImageSrc(file);
  };
  const handleUploadFile = async () => {
    const loggedInUser = JSON.parse(sessionStorage.getItem("loggedInUser"));
    try {
      const formdata = new FormData();
      formdata.append("File", file);
      const data = {
        CustomerId: loggedInUser?.CustomerId,
      };
      if (!file) {
        toast.error("Please select profile");
        return;
      }
      setLoading(true);
      const encryptedData = await ApiEncryptDecrypt.encryptString(
        Key,
        JSON.stringify({
          ...data,
        })
      );
      formdata.append("Body", encryptedData);
      const result = await axiosInstance.post(
        "/UpdateCustomerProfile",
        formdata,
        {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        }
      );
      const decryptedRes = await ApiEncryptDecrypt.decryptString(
        Key,
        result.data.body
      );
      let obj = JSON.parse(decryptedRes);
      if (obj.Status == 1 && obj.Response == null) {
        toast.error(obj.Message);
      }
      if (obj.Status == 0) {
        setIsUpload(false);
        getProfileData();
      }
    } catch (error) {
    } finally {
      setLoading(false);
    }
  };
  const [isSlider, setIsSlider] = useState(false);
  const [width, setWidth] = useState(window.innerWidth);
  const handleResize = () => {
    if (window.innerWidth <= 1024) {
      setIsSlider(true);
    } else {
      setIsSlider(false);
    }
    setWidth(window.innerWidth);
  };
  window.addEventListener("resize", handleResize);
  return (
    <>
      {isSlider || width <= 1024 ? (
        <>
          <UserSlider />
          <div
            style={{ maxHeight: "100vh" }}
            className="right overflow-y-scroll  overflow-x-hidden p-2  col-12 d-flex justify-content-center"
          >
            {tabs === "myOrders" && <MyOrders />}
            {tabs === "address" && <AddAddress />}
            {/* {tabs === "Wishlist" && <Wishlist list={lists} />} */}
            {/* {tabs === "SupportTicketList" && <NeedHelpList />} */}
            {tabs === "myAccount" && (
              <MyAccount
                pincode={pincode}
                handlePincodeChange={handlePincodeChange}
                handleSaveDetails={handleSaveAddress}
              />
            )}
            {tabs === "my wallet" && <MyWallet />}
            {tabs === "Reward" && <CoupanList />}
            {tabs === "change password" && <ChangePassword />}
          </div>
        </>
      ) : (
        <div className="myaccount1">
        <div className="container">
          <div className="row">
            <div className="col-lg-3">
              <div className="card p-3 text-center">
                <label
                  className="rounded-circle bg-light mx-auto d-flex align-items-center justify-content-center mb-2"
                  style={{ width: 60, height: 60, position: "relative" }}
                >
                  {imageSrc ? (
                    <PreviewImage
                      style={{
                        height: "60px",
                        maxWidth: "60px",
                        borderRadius: "50%",
                      }}
                      imgurl={imageSrc}
                      thumnail={true}
                    />
                  ) : (
                    <Tooltip text="Click To View Profile">
                      <PreviewImage
                        style={{
                          height: "60px",
                          maxWidth: "60px",
                          borderRadius: "50%",
                        }}
                        imgwithUrl={
                          response?.ProfilePic
                            ? response?.ProfilePic
                            : UserDefaultPic
                        }
                        thumnail={true}
                      />
                    </Tooltip>
                  )}
                </label>
                {isUpload ? (
                  <button
                    style={{
                      backgroundColor: "#629d23",
                      border: "none",
                      borderRadius: "5px",
                      fontSize: "12px",
                      maxWidth: "120px",
                      cursor: "pointer",
                      margin: "0 auto",
                    }}
                    className="px-4 py-1 text-white fs-8 "
                    onClick={handleUploadFile}
                  >
                    {loading ? "Uploading" : "Upload"}
                  </button>
                ) : (
                  <label
                    htmlFor="file"
                    style={{
                      backgroundColor: "#629d23",
                      border: "none",
                      borderRadius: "5px",
                      fontSize: "12px",
                      maxWidth: "120px",
                      cursor: "pointer",
                      margin: "0 auto",
                    }}
                    className="px-4 py-1 text-white fs-8 "
                  >
                    <input
                      onChange={handleChangeFile}
                      type="file"
                      id="file"
                      hidden
                    />
                    Change
                  </label>
                )}
                <p className="fw-bold mb-1 ">
                  Hello, {response?.CustomerName}
                  <i
                    style={{ cursor: "pointer" }}
                    className=" pt-0  d-inline-block"
                    onClick={handleMyAccount}
                  >
                    <MdOutlineEdit size={20} />
                  </i>
                  <small>(#{response?.CustomerCode})</small>
                </p>

                <small className="text-muted d-block">
                  <i>
                    <MdOutlineMail />
                  </i>{" "}
                  <a href={`mailto:${response?.CustomerEmail}`}>
                    <span style={{ fontSize: "12px" }}>
                      {" "}
                      {response?.CustomerEmail}
                    </span>
                  </a>
                </small>

                <small className="text-muted">
                  {" "}
                  <i>
                    <IoMdCall />
                  </i>{" "}
                  <a href={`tel:${response?.Mobile}`}>
                    <span>+91 {response?.Mobile}</span>
                  </a>
                </small>
              </div>
              <div className="mt-4">
                <ul className="list-group list-group-flush mb-3 ">
                  <li
                    onClick={() => handleSetTab("myOrders")}
                    className={` ${tabs === "myOrders" ? "active" : undefined}`}
                  >
                    <div className="img-icon">
                      <img
                        loading="lazy"
                        src={MyOrdersimg}
                        alt="RAV organics"
                      />
                    </div>
                    <span> My Orders</span>
                    {tabs === "myOrders" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li>
                  <li
                    onClick={() => handleSetTab("Reward")}
                    className={` ${tabs === "Reward" ? "active" : undefined}`}
                  >
                    <div className="img-icon">
                      <img
                        loading="lazy"
                        src={ReferFriend}
                        alt="RAV organics"
                      />
                    </div>
                    <span> Coupons/Vouchers</span>{" "}
                    {tabs === "Reward" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li>

                  {/* <p className="fw-semibold text-uppercase small text-muted">
                  Account
                </p> */}

                  <li
                    onClick={() => handleSetTab("change password")}
                    className={` ${tabs === "change password" ? "active" : undefined
                      }`}
                  >
                    <div className="img-icon">
                      {" "}
                      <img loading="lazy" src={NeedHelp} alt="RAV organics" />
                    </div>
                    <span>Change Password</span>{" "}
                    {tabs === "change password" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li>
                  <li
                    onClick={() => handleSetTab("address")}
                    className={` ${tabs === "address" ? "active" : undefined}`}
                  >
                    <div className="img-icon">
                      <img
                        loading="lazy"
                        src={MyAddresses}
                        alt="RAV organics"
                      />
                    </div>
                    <span> My Addresses</span>{" "}
                    {tabs === "address" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li>
                  {/* <li
                    onClick={() => handleSetTab("Wishlist")}
                    className={` ${tabs === "Wishlist" ? "active" : undefined}`}
                  >
                    <div className="img-icon">
                      <img loading="lazy" src={MyWishlist} alt="RAV organics" />
                    </div>
                    <span> My Wishlist</span>{" "}
                    {tabs === "Wishlist" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li> */}
                  <li
                    onClick={() => handleSetTab("my wallet")}
                    className={`  ${tabs === "my wallet" ? "active" : undefined
                      }`}
                  >
                    <div className="img-icon">
                      <img loading="lazy" src={NeedHelp} alt="RAV organics" />
                    </div>
                    <span>My Wallet</span>{" "}
                    {tabs === "my wallet" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li>
                  {/* <li
                    onClick={() => handleSetTab("SupportTicketList")}
                    className={`  ${tabs === "SupportTicketList" ? "active" : undefined
                      }`}
                  >
                    <div className="img-icon">
                      <img loading="lazy" src={NeedHelp} alt="RAV organics" />
                    </div>
                    <span>Need help</span>{" "}
                    {tabs === "SupportTicketList" ? (
                      <i className="fa-solid fa-angle-down"></i>
                    ) : (
                      <i className="fa-solid fa-angle-right"></i>
                    )}
                  </li> */}
                </ul>
                <div
                  style={{
                    cursor: "pointer",
                    width: "100%",
                    display: " inline-block",
                  }}
                  onClick={handleLogout}
                  className=""
                >
                  <span
                    className="logoutclass"
                    style={{ display: "inline-block" }}
                  >
                    {" "}
                    Logout
                  </span>
                </div>
              </div>
            </div>
            {/* Main Content */}
            <div
              style={{ maxHeight: "100vh" }}
              className="col-lg-9"
            >
              {tabs === "myOrders" && <MyOrders />}
              {tabs === "address" && <AddAddress />}
              {/* {tabs === "Wishlist" && <Wishlist list={lists} />} */}
              {/* {tabs === "SupportTicketList" && <NeedHelpList />} */}
              {tabs === "myAccount" && (
                <MyAccount
                  pincode={pincode}
                  handlePincodeChange={handlePincodeChange}
                  handleSaveDetails={handleSaveAddress}
                />
              )}
              {tabs === "my wallet" && <MyWallet />}
              {tabs === "Reward" && <CoupanList />}
              {tabs === "change password" && <ChangePassword />}
            </div>
          </div>
        </div>
        </div>
      )}
    </>
  );
};

export default UserProfile;
